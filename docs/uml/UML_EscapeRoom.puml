@startuml
             !define interfaces package
             !define abstracts package

             ' ===================================
             ' Paquete Config
             package config {
                 class ImportData {
                     {static} +configDataEscapeRoom(EscapeRoom): void
                 }

                 class LoadConfigApp {
                     {static} +initialitze(String): void
                     {static} +getAppBusinessId(): String
                     {static} +getAppBusinessName(): String
                     {static} +getAppBusinessAddress(): String
                 }

                 class LoadConfigDB {
                     {static} +initialitze(): void
                     {static} +getDbType(): String
                     {static} +getH2Url(): String
                     {static} +getMySqlSshEnable(): boolean
                     {static} +getMongodbEnable(): boolean
                 }
             }

             ' ===================================
             ' Paquete App Manager
             package app {
                 class AppManager {
                     {static} +getInstance(): AppManager
                     +startApp(String): void
                 }
             }

             ' ===================================
             ' Paquete DAO: Excepciones y Conexiones
             package dao.exceptions {
                 class DAOException
                 class DatabaseConnectionException
             }

             package dao.connection {
                 class SSHSessionManager {
                     {static} +getInstance(): SSHSessionManager
                     +isConnected(): boolean
                     +close(): void
                 }
             }

             ' ===================================
             ' Paquete Interfaces DAO
             package dao.interfaces {
                 interface BaseDAO<T, ID> {
                     +create(T entity): T
                     +findById(ID id): Optional<T>
                     +findAll(): List<T>
                     +update(T entity): T
                     +deleteById(ID id): void
                     +isExistsById(ID id): boolean
                 }

                 interface PlayerDAO extends BaseDAO<Player, Integer> {
                     +findSubscribedPlayers(): List<Player>
                 }

                 interface RewardWinDAO extends BaseDAO<RewardWin, Integer> {
                     +findByPlayerId(Integer id): List<RewardWinDisplayDTO>
                 }

                 interface RoomDAO extends BaseDAO<Room, Integer> {
                     +create(Room room): Room
                     +calculateTotalRoomValue(): double
                     +addClueToRoom(Integer roomId, Integer clueId): void
                     +addDecorationToRoom(Integer roomId, Integer decorationId): void
                     +findInventory(): List<InventoryDisplayDTO>
                 }

                 interface SaleDAO extends BaseDAO<Sale, Integer> {
                     +findTicketById(int idTicket): Optional<Ticket>
                     +findPlayerById(int idPlayer): Optional<Player>
                     +getTotalPlayers(): int
                     +findAllActiveTickets(): List<Ticket>
                 }

                 interface EscapeRoomDAO {
                     +getPlayerDAO(): PlayerDAO
                     +getRoomDAO(): RoomDAO
                     +getClueDAO(): ClueDAO
                     +getDecorationDAO(): DecorationDAO
                     +getCertificateDAO(): CertificateDAO
                     +getRewardDAO(): RewardDAO
                     +getTicketDAO(): TicketDAO
                     +getSaleDAO(): SaleDAO
                     +getCertificateWinDAO(): CertificateWinDAO
                     +getRewardWinDAO(): RewardWinDAO
                     +closeConnection(): void
                 }

                 interface ClueDAO extends BaseDAO<Clue, Integer> {
                     +findCluesByRoomId(Integer roomId): List<ClueDisplayDTO>
                     +findPriceByRoomId(Integer roomId): BigDecimal
                     +findAllCluesCompleteInfo(): List<ClueDisplayDTO>
                 }

                 interface CertificateDAO extends BaseDAO {
                     +create(Certificate entity): Certificate
                     +findById(id: Integer): Optional
                     +findAll(): List
                     +update(Certificate entity): Certificate
                     +deleteById(id: Integer): void
                 }

                 interface TicketDAO extends BaseDAO {
                     +create(Ticket entity): Ticket
                     +findById(id: Integer): Optional
                     +findAll(): List
                     +update(Ticket entity): Ticket
                     +deleteById(id: Integer): void
                 }

                 interface RewardDAO extends BaseDAO {
                     +create(Reward entity): Reward
                     +findById(id: Integer): Optional
                     +findAll(): List
                     +update(Reward entity): Reward
                     +deleteById(id: Integer): void
                 }

                 interface CertificateWinDAO extends BaseDAO {
                     +create(CertificateWin entity): CertificateWin
                     +findById(id: Integer): Optional
                     +findAll(): List
                     +update(CertificateWin entity): CertificateWin
                     +deleteById(id: Integer): void
                 }

                 interface DecorationDAO extends BaseDAO {
                     +create(Decoration entity): Decoration
                     +findById(id: Integer): Optional
                     +findAll(): List
                     +update(Decoration entity): Decoration
                     +deleteById(id: Integer): void
                 }

                 interface NotificationDAO extends BaseDAO {
                     +create(Notification entity): Notification
                     +findById(id: Integer): Optional
                     +findAll(): List
                     +update(Notification entity): Notification
                     +deleteById(id: Integer): void
                 }
             }

             ' ===================================
             ' Paquete Modelo (Model)
             package mvc.model {
                 class EscapeRoom <<Singleton>> implements interfaces.Observable {
                     -id: Integer
                     -name: String
                     -rooms: List<Room>
                     -players: List<Player>
                     +{static} getInstance(): EscapeRoom
                     +notifyObservers(String message): void
                 }

                 class Ticket {
                     +id: int
                     +name: String
                     +description: String
                     +price: BigDecimal
                     +isActive: boolean
                 }

                 class Player implements interfaces.Observer {
                     +id: int
                     +name: String
                     +isSubscribed: boolean
                     +update(String message): void
                 }

                 class Room {
                     +name: String
                     +difficulty: enums.Difficulty
                     +price: BigDecimal
                 }

                 class Clue {
                     +name: String
                     +price: BigDecimal
                 }

                 class Decoration {
                     +name: String
                     +price: BigDecimal
                 }

                 class Certificate {
                     +name: String
                     +description: String
                 }

                 class Reward {
                     +id: int
                     +name: String
                 }

                 class Notification {
                     +idNotification: Integer
                     +idPlayer: Integer
                     +message: String
                 }

                 class CertificateWin {
                     +id: Integer
                     +idCertificate: Integer
                     +idPlayer: Integer
                     +idRoom: Integer
                     +description: String
                     +dateDelivery: Date
                     +isActive: boolean
                 }

                 class RewardWin {
                     +id: Integer
                     +idReward: Integer
                     +idPlayer: Integer
                     +description: String
                     +dateDelivery: Date
                     +isActive: boolean
                 }

                 class Sale {
                     +id: Integer
                     +idTicket: Integer
                     +idPlayer: Integer
                     +idRoom: Integer
                     +players: Integer
                     +completion: Integer
                     +dateSale: DateTime
                     +isActive: boolean
                 }

                 ' Relaciones adicionales
                 EscapeRoom --> Room : "rooms"
                 EscapeRoom --> Player : "players"
                 EscapeRoom --> Certificate : "certificates"
                 EscapeRoom --> Reward : "rewards"

                 Player --> Notification : "notifications"
                 Player --> CertificateWin : "certificatesWon"
                 Player --> RewardWin : "rewardsWon"

                 Ticket --> Room
                 Ticket --> Player
                 Ticket --> Sale : "transactions"

                 Sale --> Player : "buyer"
                 Sale --> Room : "soldForRoom"

                 Room --> Clue : "clues"
                 Room --> Decoration : "decorations"
             }

             ' ===================================
             ' Paquete DAO Implementaciones
             package dao.impl.h2 {
                 class PlayerDAOH2Impl implements dao.interfaces.PlayerDAO
                 class ClueDAOH2Impl implements dao.interfaces.ClueDAO
                 class RoomDAOH2Impl implements dao.interfaces.RoomDAO
                 class SaleDAOH2Impl implements dao.interfaces.SaleDAO
                 class CertificateDAOH2Impl implements dao.interfaces.CertificateDAO
                 class RewardDAOH2Impl implements dao.interfaces.RewardDAO
                 class CertificateWinDAOH2Impl implements dao.interfaces.CertificateWinDAO
                 class NotificationDAOH2Impl implements dao.interfaces.NotificationDAO
                 class DecorationDAOH2Impl implements dao.interfaces.DecorationDAO
             }

             ' Relaciones entre Interfaces DAO y sus Implementaciones
             dao.interfaces.PlayerDAO <|.. PlayerDAOH2Impl
             dao.interfaces.ClueDAO <|.. ClueDAOH2Impl
             dao.interfaces.RoomDAO <|.. RoomDAOH2Impl
             dao.interfaces.SaleDAO <|.. SaleDAOH2Impl
             dao.interfaces.CertificateDAO <|.. CertificateDAOH2Impl
             dao.interfaces.RewardDAO <|.. RewardDAOH2Impl
             dao.interfaces.CertificateWinDAO <|.. CertificateWinDAOH2Impl
             dao.interfaces.NotificationDAO <|.. NotificationDAOH2Impl
             dao.interfaces.DecorationDAO <|.. DecorationDAOH2Impl

             ' ===================================
             ' Paquete DAO Factory
             package dao.factory {
                 class DAOFactory {
                     {static} +getDAOFactory(): EscapeRoomDAO
                 }

                 class EscapeRoomDAOH2
                 class EscapeRoomDAOMySql
                 class EscapeRoomDAOSqLite
             }

             ' Relaciones entre DAOFactory y las clases concretas
             DAOFactory --> EscapeRoomDAOH2 : "h2"
             DAOFactory --> EscapeRoomDAOMySql : "mysql"
             DAOFactory --> EscapeRoomDAOSqLite : "sqlite"

             EscapeRoomDAOH2 ..|> dao.interfaces.EscapeRoomDAO
             EscapeRoomDAOMySql ..|> dao.interfaces.EscapeRoomDAO
             EscapeRoomDAOSqLite ..|> dao.interfaces.EscapeRoomDAO

             ' ===================================
             ' Paquete MongoDB Connection
             package dao.mongo {
                 class MongoDBConnection {
                     {static} +getInstance(): MongoDBConnection
                     +getDatabase(): MongoDatabase
                     +closeConnection(): void
                     +getEscapeRoomId(): Optional<String>
                     +getEscapeRoomIdByName(String): String
                     +getEscapeRoomName(String): String
                     +getEscapeRoomAddress(String): String
                     +setEscapeRoomName(String, String): boolean
                     +setEscapeRoomAddress(String, String): boolean
                 }
             }

             ' Relación de MongoDBConnection
             MongoDBConnection --> SSHSessionManager

             @enduml
